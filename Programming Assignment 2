## Put comments here that give an overall description of what your ## functions do

This vector
1. take a range of numbers (x)
2. function makes x numeric with empty character()
3. Ignores null spaces
4. set function, x input, y ouput
5. get function (define parameters of data)
6. List function (list results)
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}

##set the value of the vector##
x <- c(1,2,3,4)
y <- sum(x)


##get the value of the vector##
y
[1] 20

##set value of mean##
setmean(x)
mean(x)
[1] 10

getmean(x)
mean(x)
[1] 10



## Write a short comment describing this function

This function sets the mean of two distinct points x and y

vector creates a set of ordered pairs with of end points.  x is ther range of numbers (input) and y is the output or the mean.  This is a good plotting tool to see where the average within a range of the numbers.  It saves a lot of work on an excel spreadsheet 

makeCacheMatrix <- function(x = matrix()) {

}
## Write a short comment describing this function

This function is used to cache or inverse of matrix(copies a mirror image of the matrix).  
The definition of a matrix is matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,
       dimnames = NULL)

For those with large, complex databases with a lot of forumlas.  
This will save a copy of your last entry


cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
}
 cachemean <- function(x, ...) {
+         m <- x$getmean()
+         if(!is.null(m)) {
+                 message("getting cached data")
+                 return(m)
+         }
+         data <- x$get()
+         m <- mean(data, ...)
+         x$setmean(m)
+         m
+makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}

##set the value of the vector##
x <- c(1,2,3,4)
y <- sum(x)


##get the value of the vector##
y
[1] 20

##set value of mean##
setmean(x)
mean(x)
[1] 10

getmean(x)
mean(x)
[1] 10

## Cache Solve & Inverse Test##

x
     [,1] [,2]
[1,]    1    3
[2,]    2    4


cacheSolve(x)
     [,1] [,2]
[1,]    1    3
[2,]    2    4



The Solve function returns the inverse of x (mirror image) with its dataframe.


